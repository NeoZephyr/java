如果要实现 immutable 的类，我们需要做到：
将 class 自身声明为 final，这样别人就不能扩展来绕过限制了
将所有成员变量定义为 private 和 final，并且不要实现 setter 方法
通常构造对象时，成员变量使用深度拷贝来初始化，而不是直接赋值，这是一种防御措施，因为你无法确定输入对象不被其他人修改
如果确实需要实现 getter 方法，或者其他可能会返回内部状态的方法，使用 copy-on-write 原则，创建私有的 copy

JVM退出：JVM收到退出信号后，会调用注册的钩子，我们通过的注册的JVM退出钩子进行优雅关机
阻止Daemon的线程在JVM退出被杀掉而导致消息丢失：如果Worker线程是Daemon线程，我们需要在JVM退出钩子中等待Worker线程完成当前手头处理的消息，再退出JVM。如果不是Daemon线程，即使JVM收到退出信号，也得等待Worker线程退出后再退出，不会丢掉正在处理的消息
唤醒阻塞 Worker 线程并退出：中断线程以退出，在异常处理的默认处理器中被捕捉，并写入错误日志

关闭钩子
```java
Runtime.getRuntime().addShutdownHook(new Thread() {
  public void run() {

  }
});
```

JVM 停止时将所有的守护线程抛弃，不执行 `finally` 代码块，直接退出，应尽可能少地使用守护进程，守护线程最好用于执行内部任务

频繁GC问题或内存溢出问题
一、使用jps查看线程ID
二、使用jstat -gc 3331 250 20 查看gc情况，一般比较关注PERM区的情况，查看GC的增长情况。
三、使用jstat -gccause：额外输出上次GC原因
四、使用jmap -dump:format=b,file=heapDump 3331生成堆转储文件
五、使用jhat或者可视化工具（Eclipse Memory Analyzer 、IBM HeapAnalyzer）分析堆情况。
六、结合代码解决内存溢出或泄露问题

获取 Java 程序使用的内存
通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间

Java 中的编译期常量是什么
static final 变量就是编译期常量。这些变量在编译时会被替换掉，因为编译器知道这些变量的值在运行时不能改变

jmap -heap pid 查看堆使用情况
jmap -histo pid：查看堆中对象数量和大小

static
类属性中被static所引用的变量，会被作为GC的root根节点。作为根节点就意味着，这一类变量是基本上不会被回收的。因此，static很容易引入内存泄漏的风险

ThreadLocal 可以保存"key : value"键值对，一个ThreadLocal只能保存一个
在ThreadLoalMap中，也是初始化一个大小16的Entry数组，Entry对象用来保存每一个key-value键值对，只不过这里的key永远都是ThreadLocal对象，是不是很神奇，通过ThreadLocal对象的set方法，结果把ThreadLocal对象自己当做key，放进了ThreadLoalMap中

ThreadLoalMap的Entry是继承WeakReference，和HashMap很大的区别是，Entry中没有next字段，所以就不存在链表的情况

hash冲突
每个ThreadLocal对象都有一个hash值 threadLocalHashCode，每初始化一个ThreadLocal对象，hash值就增加一个固定的大小 0x61c88647。

在插入过程中，根据ThreadLocal对象的hash值，定位到table中的位置i，过程如下： 1、如果当前位置是空的，那么正好，就初始化一个Entry对象放在位置i上； 2、不巧，位置i已经有Entry对象了，如果这个Entry对象的key正好是即将设置的key，那么重新设置Entry中的value； 3、很不巧，位置i的Entry对象，和即将设置的key没关系，那么只能找下一个空位置；

这样的话，在get的时候，也会根据ThreadLocal对象的hash值，定位到table中的位置，然后判断该位置Entry对象中的key是否和get的key一致，如果不一致，就判断下一个位置

可以发现，set和get如果冲突严重的话，效率很低，因为ThreadLoalMap是Thread的一个属性，所以即使在自己的代码中控制了设置的元素个数，但还是不能控制其它代码的行为

ThreadLocal可能导致内存泄漏
创建ThreadLocal的线程一直持续运行，那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露

在调用ThreadLocal的get()、set()可能会清除ThreadLocalMap中key为null的Entry对象，这样对应的value就没有GC Roots可达了，下次GC的时候就可以被回收，当然如果调用remove方法，肯定会删除对应的Entry对象

如果使用ThreadLocal的set方法之后，没有显示的调用remove方法，就有可能发生内存泄露，所以养成良好的编程习惯十分重要，使用完ThreadLocal之后，记得调用remove方法

Fork/Join
```java
public class ForkJoinTask extends RecursiveTask<Integer> {

    public static final int threshold = 2;
    private int start;
    private int end;

    public ForkJoinTask(int start, int end) {
        this.start = start;
        this.end = end;
    }

    @Override
    protected Integer compute() {
        int sum = 0;

        //如果任务足够小就计算任务
        boolean canCompute = (end - start) <= threshold;
        if (canCompute) {
            for (int i = start; i <= end; i++) {
                sum += i;
            }
        } else {
            // 如果任务大于阈值，就分裂成两个子任务计算
            int middle = (start + end) / 2;
            ForkJoinTask leftTask = new ForkJoinTask(start, middle);
            ForkJoinTask rightTask = new ForkJoinTask(middle + 1, end);

            // 执行子任务
            leftTask.fork();
            rightTask.fork();

            // 等待任务执行结束合并其结果
            int leftResult = leftTask.join();
            int rightResult = rightTask.join();

            // 合并子任务
            sum = leftResult + rightResult;
        }
        return sum;
    }

    public static void main(String[] args) {
        ForkJoinPool forkjoinPool = new ForkJoinPool();

        //生成一个计算任务，计算1+2+3+4
        ForkJoinTask task = new ForkJoinTask(1, 100);

        //执行一个任务
        Future<Integer> result = forkjoinPool.submit(task);

        try {
            log.info("result:{}", result.get());
        } catch (Exception e) {
            log.error("exception", e);
        }
    }
}
```


内存屏障共分为四种类型：
LoadLoad屏障：
抽象场景：Load1; LoadLoad; Load2
Load1 和 Load2 代表两条读取指令。在Load2要读取的数据被访问前，保证Load1要读取的数据被读取完毕。

StoreStore屏障：
抽象场景：Store1; StoreStore; Store2
Store1 和 Store2代表两条写入指令。在Store2写入执行前，保证Store1的写入操作对其它处理器可见

LoadStore屏障：
抽象场景：Load1; LoadStore; Store2
在Store2被写入前，保证Load1要读取的数据被读取完毕。

StoreLoad屏障：
抽象场景：Store1; StoreLoad; Load2
在Load2读取操作执行前，保证Store1的写入对所有处理器可见。StoreLoad屏障的开销是四种屏障中最大的

在一个变量被volatile修饰后，JVM会为我们做两件事：
1.在每个volatile写操作前插入StoreStore屏障，在写操作后插入StoreLoad屏障。
2.在每个volatile读操作前插入LoadLoad屏障，在读操作后插入LoadStore屏障。


gc日志：-XX:PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamp -Xloggc:$CATALINA_BASE/logs/gc.log

观察内核状态的上下文切换(cs)次数
bi和bo这两个值，分别表示块设备每秒接收的块数量和块设备每秒发送的块数量，可以判定io繁忙状况
vmstat 1 5

String类型的常量池主要使用方法有两种：
直接使用双引号声明出来的String对象会直接存储在常量池中。
如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中

异常
在Finally块中清理资源或者使用try-with-resource语句
不要捕获Throwable
不要忽略异常
不要记录并抛出异常，经常会给同一个异常输出多条日志
包装异常时不要抛弃原始的异常

vmstat 测试
us过高：
a. 代码问题。比如一个耗时的循环不加sleep，或者在一些cpu密集计算（如xml解析，加解密，加解压，数据计算）时没处理好
b. gc频繁。一个比较容易遗漏的问题就是gc频繁时us容易过高，因为垃圾回收属于大量计算的过程。gc频繁带来的cpu过高常伴有内存的大量波动，通过内存来判断并解决该问题更好
sy过高：
a. 上下文切换次数过多。通常是系统内线程数量较多，并且线程经常在切换，由于系统抢占相对切换时间和次数比较合理，所以sy过高通常都是主动让出cpu的情况，比如sleep或者lock wait, io wait。
wa过高：
a. 等待io的cpu占比较多。注意与上面情况的区别，io wait引起的sy过高指的是io不停的wait然后唤醒，因为数量较大，导致上下文切换较多，强调的是动态的过程；而io wait引起的wa过高指的是io wait的线程占比较多，cpu切换到这个线程是io wait，到那个线程也是io wait，于是总cpu就是wait占比较高。
id过高：
a. 很多人认为id高是好的，其实在性能测试中id高说明资源未完全利用，或者压测不到位，并不是好事


HTTP连接池有以下优势：
降低了频繁建立HTTP连接的时间开销，减少了TCP连接建立和释放时socket通信服务器端资源的浪费；
支持更高的并发量

```
public class HttpConnectManager {

   public static void main(String[] args) throws Exception {
       //创建HTTP的连接池管理对象
       PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        //将最大连接数增加到200
       connectionManager.setMaxTotal(200);
       //将每个路由的默认最大连接数增加到20
       connectionManager.setDefaultMaxPerRoute(20);
       //将http://www.baidu.com:80的最大连接增加到50
       //HttpHost httpHost = new HttpHost("http://www.baidu.com",80);
       //connectionManager.setMaxPerRoute(new HttpRoute(httpHost),50);

       //发起3次GET请求
       String url ="https://www.baidu.com/s?word=java";
       long start = System.currentTimeMillis();
       for (int i=0;i<100;i++){
           doGet(connectionManager, url);
       }
       long end = System.currentTimeMillis();
       System.out.println("consume -> " + (end - start));

       //清理无效连接
       new IdleConnectionEvictor(connectionManager).start();
   }

   /**
    * 请求重试处理
    * @param tryTimes 重试次数
    * @return
    */
   public static HttpRequestRetryHandler retryHandler(final int tryTimes){

       HttpRequestRetryHandler httpRequestRetryHandler = new HttpRequestRetryHandler() {
           @Override
           public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
                // 如果已经重试了n次，就放弃
               if (executionCount >= tryTimes) {
                   return false;
               }
               // 如果服务器丢掉了连接，那么就重试
               if (exception instanceof NoHttpResponseException) {
                   return true;
               }
               // 不要重试SSL握手异常
               if (exception instanceof SSLHandshakeException) {
                   return false;
               }
               // 超时
               if (exception instanceof InterruptedIOException) {
                   return false;
               }
               // 目标服务器不可达
               if (exception instanceof UnknownHostException) {
                   return true;
               }
               // 连接被拒绝
               if (exception instanceof ConnectTimeoutException) {
                   return false;
               }
               // SSL握手异常
               if (exception instanceof SSLException) {
                   return false;
               }
               HttpClientContext clientContext = HttpClientContext .adapt(context);
               HttpRequest request = clientContext.getRequest();
               // 如果请求是幂等的，就再次尝试
               if (!(request instanceof HttpEntityEnclosingRequest)) {
                   return true;
               }
               return false;
           }
       };
       return httpRequestRetryHandler;
   }

   /**
    * doGet
    * @param url 请求地址
    * @param connectionManager
    * @throws Exception
    */
   public static void doGet(HttpClientConnectionManager connectionManager,String url) throws Exception {
        //从连接池中获取client对象，多例
       CloseableHttpClient httpClient = HttpClients.custom()
               .setConnectionManager(connectionManager)
               .setRetryHandler(retryHandler(5)).build();

       // 创建http GET请求
       HttpGet httpGet = new HttpGet(url);
       // 构建请求配置信息
       RequestConfig config = RequestConfig.custom().setConnectTimeout(1000) // 创建连接的最长时间
                .setConnectionRequestTimeout(500) // 从连接池中获取到连接的最长时间
               .setSocketTimeout(10 * 1000) // 数据传输的最长时间10s
               .setStaleConnectionCheckEnabled(true) // 提交请求前测试连接是否可用
               .build();
       // 设置请求配置信息
       httpGet.setConfig(config);

       CloseableHttpResponse response = null;
       try {
           // 执行请求
           response = httpClient.execute(httpGet);
           // 判断返回状态是否为200
           if (response.getStatusLine().getStatusCode() == 200) {
               String content = EntityUtils.toString(response.getEntity(), "UTF-8");
               System.out.println("内容长度：" + content.length());
           }
       } finally {
           if (response != null) {
               response.close();
           }
           // 此处不能关闭httpClient，如果关闭httpClient，连接池也会销毁
           // httpClient.close();
       }
   }

   /**
    * 监听连接池中空闲连接，清理无效连接
    */
   public static class IdleConnectionEvictor extends Thread {

       private final HttpClientConnectionManager connectionManager;

       private volatile boolean shutdown;

       public IdleConnectionEvictor(HttpClientConnectionManager connectionManager) {
           this.connectionManager = connectionManager;
       }

       @Override
       public void run() {
           try {
               while (!shutdown) {
                   synchronized (this) {
                       //3s检查一次
                       wait(3000);
                       // 关闭失效的连接
                       connectionManager.closeExpiredConnections();
                   }
               }
           } catch (InterruptedException ex) {
               // 结束
               ex.printStackTrace();
           }
       }

       public void shutdown() {
           shutdown = true;
           synchronized (this) {
               notifyAll();
           }
       }
   }
}
```

```
/**
* 多线程-HttpClient连接池管理HTTP请求实例
*/
public class MultiThreadHttpConnManager {
   public static void main(String[] args) {
       //连接池对象
       PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
      //将最大连接数增加到200
       connectionManager.setMaxTotal(200);
       //将每个路由的默认最大连接数增加到20
       connectionManager.setDefaultMaxPerRoute(20);
       //HttpClient对象
       CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(connectionManager).build();
        //URIs to DoGet
       String[] urisToGet = {
               "https://www.baidu.com/s?word=java",
               "https://www.baidu.com/s?word=java",
               "https://www.baidu.com/s?word=java",
               "https://www.baidu.com/s?word=java"
       };
       //为每一个URI创建一个线程
       GetThread[] threads = new GetThread[urisToGet.length];
       for (int i=0;i<threads.length;i++){
           HttpGet httpGet = new HttpGet(urisToGet[i]);
           threads[i] = new GetThread(httpClient,httpGet);
       }
       //启动线程
       for (int j=0;j<threads.length;j++){
           threads[j].start();
       }
       //join 线程
       for(int k=0;k<threads.length;k++){
           try {
               threads[k].join();
           } catch (InterruptedException e) {
               e.printStackTrace();
           }
       }
   }

   /**
    * 执行Get请求线程
    */
   public static class GetThread extends Thread{
       private final CloseableHttpClient httpClient;
       private final HttpContext context;
       private final HttpGet httpget;
       public GetThread(CloseableHttpClient httpClient, HttpGet httpget) {
           this.httpClient = httpClient;
           this.context = HttpClientContext.create();
           this.httpget = httpget;
       }
       @Override
       public void run() {
           try {
               CloseableHttpResponse response = httpClient.execute(httpget,context);
               try {
                   HttpEntity entity = response.getEntity();
               }finally {
                   response.close();
               }
           }catch (ClientProtocolException ex){
               //处理客户端协议异常
           }catch (IOException ex){
               //处理客户端IO异常
           }
       }
   }
}
```


HTTPS 成本
证书费用以及更新维护
HTTPS 降低用户访问速度
HTTPS 消耗 CPU 资源

使用 session 防止表单重复提交
1. 在网络延迟的情况下，用户多次提交表单
2. 表单提交后刷新导致表单重复提交
3. 用户提交表单后，回退到表单页面后进行再次提交

解决方案
1. 用JavaScript控制Form表单只能提交一次（按钮点击之后不可用）
2. token

跨域
spring boot
```
@Configuration
public class CustomCORSConfiguration {
 private CorsConfiguration buildConfig() {
   CorsConfiguration corsConfiguration = new CorsConfiguration();
   corsConfiguration.addAllowedOrigin("*");
   corsConfiguration.addAllowedHeader("*");
   corsConfiguration.addAllowedMethod("*");
   return corsConfiguration;
 }

 @Bean
 public CorsFilter corsFilter() {
   UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
   source.registerCorsConfiguration("/**", buildConfig());
   return new CorsFilter(source);
 }
}
```

@Profile注解组合使用@Configuration和@Component注解
@Profile("prod")
同时激活多个配置
spring.profiles.active: prod,proddb,prodmq

RBAC
RBAC 是基于角色的访问控制（Role-Based Access Control ）在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予用户，这样的权限设计很清楚，管理起来很方便

XSS
1. 反射型：url 参数直接注入
2. 存储型：存储到 DB 后读取时注入

XSS 攻击点
1. HTML 节点内容
转义 < 与 >

2. HTML 属性
转义 &
转义 " 与 '

3. js 代码
json encode: JSON.stringify

4. 富文本
白名单方式：只允许白名单中的标签与属性
黑名单方式

使用http only的cookie

浏览器内置防御：参数出现在 HTML 内容或属性

CSRF：跨站请求伪造
利用用户登录状态
用户不知情完成业务请求

CSRS 防御
1. same-site 属性：拦截对用户登录态利用（并不是所有浏览器支持）
2. 在前端页面加入验证信息（图形验证码，token）
3. referer

```
meta(name="csrf_token", content=csrfToken)
```

cookie 特性
1. 前端数据存储
2. 后端通过 http 头设置
3. 请求时通过 http 头传给后端
4. 前端可读写
5. 遵守同源策略

cookies 属性
1. 域名
2. 有效期
3. 路径
4. http-only：只能被 http 协议使用
5. secure：是否支持 https 协议

cookies 作用
1. 存储个性化设置
2. 存储未登录时用户唯一标识
3. 存储已登录用户凭证

登录用户凭证
1. 用户 id
2. 用户 id + 签名
3. sessionId

XSS 窃取 cookies
1. http-only 的 cookies 不会被窃取

防御点击劫持
1. js 禁止内嵌
2. X-FRAME-OPTIONS 禁止内嵌

traceroute www.baidu.com

HTTP 篡改
1. 插入广告
2. 重定向网站
3. 无法防御 xss 和 csrf 攻击

确定服务器身份
1. 浏览器内置信任列表
2. 服务器从 CA 申请证书
3. CA 验证服务器域名并颁发证书
4. 浏览器发起请求
5. 服务器出具证书
6. 浏览器验证通过

密码安全
帮助用户加强复杂度：多次变换，加盐，随机字符串
https 传输
频率限制
前端加密

防御 SQL 注入
1. 关闭 SQL 错误输出
2. 检查数据类型
3. 对数据进行转义
4. 参数化查询

数据库用户权利最小化

上传问题
1. 限制上传后缀
2. 文件类型检查
3. 文件内容检查
4. 程序输出
5. 权限控制，可写与可执行互斥

DOS 攻击防御
1. 避免重逻辑业务
2. 快速失败快速返回
3. 防止雪崩机制
4. 有损服务
5. CDN

重放攻击防御
1. HTTPS 加密
2. 时间戳
3. token


POST提交数据的方式
1. application/x-www-form-urlencoded：提交数据表单时经常使用，Body内部存放的是转码后的键值对
```
POST http://xyz.com HTTP/1.1
Content-Type: application/x-www-form-urlencoded;charset=utf-8
a=1&b=2&c=3&c=4
```
2. application/json：提交结构化表单时使用，Body内部存放的是JSON字符串
```
POST http://xyz.com HTTP/1.1
Content-Type: application/json;charset=utf-8
{"a": 1, "b": 2, "c": [3, 4]}
```
3. multipart/form-data：上传文件时经常使用
```
POST /upload HTTP/1.1
Content-Length:xxxxx
Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryKOThiwE6HubGib7j
Host:example.com
------WebKitFormBoundaryKOThiwE6HubGib7j
Content-Disposition: form-data; name="key1"
value1
------WebKitFormBoundaryKOThiwE6HubGib7j
Content-Disposition: form-data; name="key2"
value2
------WebKitFormBoundaryKOThiwE6HubGib7j
Content-Disposition: form-data; name="file1"; filename="file1name.png"
Content-Type: image/png
file1 content here
------WebKitFormBoundaryKOThiwE6HubGib7j
Content-Disposition: form-data; name="file2"; filename="file2name.jpeg"
Content-Type: image/jpeg
file2 content here
------WebKitFormBoundaryKOThiwE6HubGib7j--
```

解决跨域
JSONP通过HTML的script标记实现了跨域共享数据的方式。JSON通过在网页里定义一个回调方法，然后在页面上插入一个动态script标签，指向目标调用地址。服务器会返回一段javascript代码，一般是some_callback(data)这种形式的回调。该段代码会在浏览器里自动执行，于是网页就得到了跨域服务器返回的数据
```
<script>
function some_callback(data) {
   console.log(data)
}
</script>
<script src="http://example.com/someapi?callback=some_callback">
</script>
```
JSONP是否可以获取到数据还需要服务器对这种调用提供显示支持，服务器必须将数据以javascript代码的形式返回才可以传递给浏览器

CORS(Cross-Origin Resource Sharing)
JSONP的不足在于它只能发送GET请求，并且不能携带cookie。而CORS则可以发送任意类型的请求，可以选择性携带cookie。
CORS是通过Ajax发送的跨域请求技术。CORS的请求分为两种，一种是简单请求，一种是复杂请求。简单请求就是头部很少很简单的GET/HEAD/POST请求。复杂请求就是非简单请求
如果是复杂请求，要走一个预检的流程。预检就是浏览器先向服务器发送一个Method为Options的请求，如果服务器允许跨域请求，浏览器再发起这个Ajax请求。所以CORS的复杂请求会比简单请求额外耗费一个TTL的时间

TCP三次握手和四次挥手？
客户端–发送带有SYN标志的数据包–一次握手–服务端
服务端–发送带有SYN/ACK标志的数据包–二次握手–客户端
客户端–发送带有带有ACK标志的数据包–三次握手–服务端
四次挥手：
客户端-发送一个FIN，用来关闭客户端到服务器的数据传送
服务器-收到这个FIN，它发回一个ACK，确认序号为收到的序号加1 。和SYN一样，一个FIN将占用一个序号
服务器-关闭与客户端的连接，发送一个FIN给客户端
客户端-发回ACK报文确认，并将确认序号设置为收到序号加1

JWT 与 Session 方式存储 id 的差异
Session方式存储用户id的最大弊病在于要占用大量服务器内存


spring 事务
TransactionDefinition 用于描述事务的隔离级别、超时时间、是否为只读事务和事务传播规则等控制事务具体行为的事务属性

PlatformTransactionManager 根据 TransactionDefinition 提供的事务属性配置信息创建事务，并用 TransactionStatus 描述这个激活事务的状态

TransactionStatus 代表一个事务的具体运行状态，事务管理器可以通过该接口获取事务运行期的状态信息。该接口继承与 SavepointManager 接口，SavepointManager 接口拥有以下几个方法：
```
// 创建一个保存点对象
Object createSavepoint();
// 将事务回滚到特定的保存点上，被回滚的保存点将自动释放
void rollbackToSavepoint(Object savepoint);
// 释放一个保存点，若事务提交，则所有保存点会被自动释放
void releaseSavepoint(Object savepoint);
```

TransactionStatus 扩展 SavepointManager 接口，提供以下方法
```
// 判断当前事务是否在内部创建了一个保存点
boolean hasSavepoint();
// 判断当前事务是否是一个新的事务
boolean isNewTransaction();
// 判断当前事务是否已经结束
boolean isCompleted();
// 判断当前事务是否已经被标识为 rollback-only
boolean isRollbackOnly();
// 将当前事务设置为 rollback-only，通过该事务同时事务管理器只能将事务回滚
void setRollbackOnly();
```

PlatformTransactionManager 定义以下接口方法
```
// 根据事务定义信息从事务环境中返回一个已存在的事务，或者创建一个新的事务
TransactionStatus getTransaction(TransactionDefinition definition);
// 根据事务状态提交事务
commit(TransactionStatus status);
// 将事务回滚
rollback(TransactionStatus status);
```

DataSourceTransactionManager 使用 DataSource 的 Connection 的 commit()、rollback() 等方法管理事务

PROPAGATION_REQUIRED：若当前没有事务，则创建一个事务；若已经存在一个事务，则加入到这个事务中
PROPAGATION_SUPPORTS：支持当前事务。若当前没有事务，则以非事务方式执行
PROPAGATION_MANDATORY：使用当前事务、若当前没有事务，则抛出异常
PROPAGATION_REQUIRES_NEW：创建事务。若当前存在事务，则把当前事务挂起
PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作。若当前存在事务，则把当前事务挂起
PROPAGATION_NEVER：以非事务方式执行操作。若当前存在事务，则抛出异常
PROPAGATION_NESTED：若当前存在事务，则在嵌套事务内执行；若当前没有事务，则执行与 PROPAGATION_REQUIRED 类似的操作

默认情况下，当发生运行期异常时，事务将被回滚；当发生检查型异常时，既不回滚也不提交，控制器交给外层调用

基于 aop/tx 命名空间的配置
```
<bean id="txManager"
  class="org.springframework.datasource.DatasourceTransactionManager"
  p:dataSource-ref="dataSource" />

<aop:config>
  <aop:pointcut id="serviceMethod"
    expression="execution(* com.pain.service.*Service.*(..))" />
  <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
</aop:config>

<tx:advice id="txAdvice" transaction-manager="txManager">
  <tx:attributes>
    <tx:method name="get*" read-only="false" />
    <tx:method name="add*" rollback-for="Exception" />
    <tx:method name="update*" />
  </tx:attributes>
</tx:advice>
```

注解配置事务
```
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
</bean>

对标准 @Transactional 注解的 Bean 进行加工处理，以织入事务管理切面
<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
```
<tx:annotation-driven> 还有两个属性：
1. proxy-target-class：若为 true 则通过创建子类来代理业务类；若为 false 则使用基于接口的代理
2. order：若业务类除事务切面外，还需要织入其他的切面，则通过该属性可以控制事务切面在目标连接点的织入顺序

@Transactional 默认事务属性
事务传播行为：PROPAGATION_REQUIRED
事务隔离级别：ISOLATION_DEFAULT
读写事务属性：读/写事务
超时时间：依赖于底层的事务系统的默认值
回滚设置：任何运行期异常引发回滚，任何检查型异常不会引发回滚

事务增强
基于接口的动态代理：除 public 外的其他所有方法。此外，public static 也不能被增强
基于 CGLib 的动态代理：private, static, final 方法




